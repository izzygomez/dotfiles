#!/bin/zsh

################################################################################
# Source checkers.sh
################################################################################

# Note: this should be updated if the location of this file changes within the
# dotfiles repo.
dotfiles_dir=$(dirname $(dirname $(realpath ~/.zshrc)))
source $dotfiles_dir/zsh/checkers.sh

################################################################################
# Oh My Zsh configuration.
#
# I deleted most of the commented out template lines that were not being used;
# see file in omz repo here:
# https://github.com/ohmyzsh/ohmyzsh/blob/master/templates/zshrc.zsh-template
################################################################################

export ZSH="$HOME/.oh-my-zsh"
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"
plugins=(git)

source $ZSH/oh-my-zsh.sh

################################################################################
# All machines configuration
#
# This configuration should apply to all synchronized machines that make use of
# https://github.com/izzygomez/dotfiles or
# https://github.com/izzygomez/mac-setup-scripts
################################################################################

if is_command_available emacs; then
    source $dotfiles_dir/zsh/zshrc_emacs
else
    echo "~/.zshrc: emacs is not available, can't set settings."
fi

# makes ^R backward search support patterns (i.e. '*' characters)
bindkey '^R' history-incremental-pattern-search-backward

if is_command_available git; then
    # Git commit graph alias
    # https://tech.serhatteker.com/post/2021-02/git-log-tree/
    alias gitgraph='git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\'' --all'
    alias ggr='gitgraph'
else
    echo "~/.zshrc: git is not available, can't set settings."
fi

if is_command_available tmux; then
    # Some useful & opinionated tmux aliases
    alias tl='tmux ls'
    alias tk='tmux kill-server'

    # Create a new tmux session with a blank window in "~"
    # Usage:
    # > {tn,tmuxnew} [session-name]
    # > t # no need to specify a session name
    alias t='tmux new -n "" -c "~"'
    alias tmuxnew='tmux new -n "" -c "~" -s'
    alias tn='tmuxnew'

    # Attach to a tmux session while detaching any other clients
    alias tmuxattach='tmux attach -dt'
    alias ta='tmuxattach'
else
    echo "~/.zshrc: tmux is not available, can't set settings."
fi

# Shortcuts for having a browsable history, with date & time stamps.
# `h` is for the entire history, `ht N` is for the last N lines.
alias h='history -f | less'
__history_tail() {
    if [ -z "$1" ]; then
        echo "Usage: ht {number of lines}"
        return 1
    fi
    history -f | tail -n $1 | less
}
alias ht=__history_tail

# Command line weather widget
weather() {
    if [ "$1" = "--help" ]; then
        echo "Usage: weather [location]"
        echo "Display the weather information for a specified location."
        echo "If no location is specified, the weather for the current location is displayed."
        echo "Example: weather 'Brooklyn, NY'"
        echo "         weather 'San Francisco, CA'"
        return
    fi

    get_location() {
        # Use ipinfo.io to get geolocation data; this is useful to do because
        # sometimes when using a VPN `curl wttr.in` returns a `not found` error,
        # so here we force a location name every time according to IP location.
        ipinfo=$(curl -s ipinfo.io)
        city=$(echo "$ipinfo" | grep '"city"' | awk -F '"' '{print $4}')
        region=$(echo "$ipinfo" | grep '"region"' | awk -F '"' '{print $4}')
        echo "$city,$region"
    }

    if [ -n "$1" ]; then
        location=$(echo "$1" | sed 's/ /+/g') # replace spaces with "+" in url
    else
        location=$(get_location)
        if [ -z "$location" ]; then
            echo "Error: Unable to determine location. Please specify a location or disable VPN."
            return
        fi
        location=$(echo "$location" | sed 's/ /+/g') # replace spaces with "+" in url
    fi

    # `?u` ensures F¬∞ units are used [1]
    # [1] https://github.com/chubin/wttr.in?tab=readme-ov-file#weather-units
    # note: separating `url` definition bc of weird behavior when adding a `?Y`
    # string after a `$X` string.
    url="wttr.in/$location"
    response=$(curl -s "$url?u")

    error="Weather report: not found"
    if echo "$response" | grep -q "$error"; then
        echo "Error: saw '$error' in response; maybe disable VPN?"
	return
    else
        echo "$response"
	return
    fi
}

# Added as part of pyenv install instructions [1]. On macOS, should be installed
# via `brew`; elsewhere follow these instructions [2].
# [1] https://github.com/pyenv/pyenv#set-up-your-shell-environment-for-pyenv
# [2] https://github.com/pyenv/pyenv-installer
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
if is_command_available pyenv; then
    eval "$(pyenv init -)"
else
    echo "~/.zshrc: pyenv is not available, can't set settings."
fi

# Added per instructions (7) while setting up GPG keys for git commits
# https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key#telling-git-about-your-gpg-key
export GPG_TTY=$(tty)

# Added automatically from install script:  https://github.com/nvm-sh/nvm#installing-and-updating
# Note that these lines aren't inside the `if` block because (1) they fail
# gracefully if nvm is not installed, and (2) they are needed for `nvm` to be
# available in the first place.
export NVM_DIR="$HOME/.nvm"
# This loads nvm
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
# This loads nvm bash_completion
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
if ! is_command_available nvm; then
    echo "~/.zshrc: nvm is not available."
fi

################################################################################
# Machine-specific configuration
################################################################################

# Set prompt emoji prefixes to differentiate different machines.
if is_izzys_mba; then
    PROMPT='‚òÅÔ∏è  '$PROMPT
elif is_izzys_mbp; then
    PROMPT='üöÄ '$PROMPT
elif is_izzys_raspberry_pi; then
    # Note: considering I mostly `mosh` into this machine & mosh has a long
    # history of not supporting certain emojis/characters [1], I'm limited in
    # what I can use here.
    # [1] https://github.com/mobile-shell/mosh/issues/234
    PROMPT='ü§ñ '$PROMPT
else
    echo "~/.zshrc: not a recognized machine, not setting prompt prefix."
fi

# Raspberry Pi specific configuration.
if is_raspberry_pi; then
    source $dotfiles_dir/zsh/zshrc_raspberry_pi
fi

# Mac OS specific configuration; see zshrc_macos for details, but this must be
# sourced last.
if is_mac_os; then
    source $dotfiles_dir/zsh/zshrc_macos
fi
